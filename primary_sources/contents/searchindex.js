(function(){
var additionalData = [
["blank.html","(no title)",
"This is a dummy file provided as a sample.\nCONFIDENTIAL\n",0]
,["external.html","(no title)",
"CONFIDENTIAL\n",0]
,["history.html","Revision History",
"Revision History\n",0]
,["history.html","Version 6.0 2015-12-21",
"Version 6.0 2015-12-21\n",0]
,["history.html","Changed",
"Changed\n \t7.1 Image Data Attached to Posts to Communities or Messages to Friends \tAdded MPO format. Added supported sizes for baseline JPEG format.\n",0]
,["history.html","Version 5.0 2015-01-23",
"Version 5.0 2015-01-23\n",0]
,["history.html","Added",
"Added\n \t5.6 Exchange of Mii Characters via Communication Features\n \t9.1 Handling When Saving UGC to Shared Save Data\n",0]
,["history.html","Changed",
"Changed\n \t5.1 Applications That Use Mii Characters \tRevised the description in the top paragraph.\n",0]
,["history.html","Version 4.0 2014-11-10",
"Version 4.0 2014-11-10\n",0]
,["history.html","Added",
"Added\n \t2.2 Effects of Background Processing on the Application\n \t3.3 How to Use Disc Timing Emulation\n \t6.2 Caution When Calling Functions Related to Background Processing\n",0]
,["history.html","Version 3.0 2014-09-03",
"Version 3.0 2014-09-03\n",0]
,["history.html","Added",
"Added\n \t3.2 Not Using File Timestamps\n \t5.1 Applications That Use Mii Characters\n \t5.2 Prohibition of Altering Mii-Related Data\n \t5.3 Using Additional Information From Mii Characters\n \t5.5 Addition of Mii Characters While an Overlay Application is Running\n",0]
,["history.html","Changed",
"Changed\n \tOverall \tAdded related library names to the keywords.\n \t5.4 Obtaining FFLStoreData from Non-FFL Libraries \tAdded NFP library to the libraries that can obtain the FFLStoreData of Mii characters.\n",0]
,["history.html","Version 2.0 2014-06-09",
"Version 2.0 2014-06-09\n",0]
,["history.html","Added",
"Added\n \t3.1 Prohibition of Prolonged, Continuous, Non-Sequential Access\n",0]
,["history.html","Changed",
"Changed\n \tOverall \tAdded section numbers.\n",0]
,["history.html","Version 1.0 2014-03-25",
"Version 1.0 2014-03-25\n",0]
,["history.html","Added/Changed",
"Added/Changed\n \tInitial version.\nCONFIDENTIAL\n",0]
,["player.html","(no title)",
"\t\n",0]
,["printpage.html","Page for Printing",
"CONFIDENTIAL\n",0]
,["search.html","Search Page",
"Search Page\nYou can search the documentation from this page. Enter keywords in the textbox below, and press Enter or click Search to search for them. Pages containing the keywords you entered will be retrieved. Note: Only pages containing all of the specified keywords will be retrieved.\n Search\nCONFIDENTIAL\n",0]
,["search_KB.html","Keyword Jump",
"Keyword Jump\nCONFIDENTIAL\n",0]
,["title.html","Wii U Programming Precautions",
"Wii U Programming Precautions\nVersion 6.0\n\tNintendo Confidential\n\tThe content of this document is highly confidential and should be handled accordingly.\n The content of this document cannot be duplicated, copied, reprinted, transferred, distributed, or loaned in whole or in part without the prior approval of Nintendo.\n This document contains confidential and proprietary information of Nintendo and is also protected under the copyright laws of the United States and foreign countries.\n No part of this document may be released, distributed, transmitted or reproduced in any form or by any electronic or mechanical means, including information storage and retrieval systems, without permission in writing from Nintendo.\nÂ© 2014-2015 Nintendo. All rights reserved.\nAll company and product names in this document are the trademarks or registered trademarks of their respective companies.\nCONFIDENTIAL\n",0]
,["Pages/Page_47817742.html","3 File System",
"3 File System\n",0]
,["Pages/Page_47817742.html#PageId_47819451","3.1 Prohibition of Prolonged, Continuous, Non-Sequential Access",
"3.1 Prohibition of Prolonged, Continuous, Non-Sequential Access\nAvoid implementations where, if there has been no user input for 5 minutes or more, the application still performs continuous, non-sequential disc access for an hour or more.\nHere, \"non-sequential access\" is defined as seek accesses on a disc where the seeks are more than 200 MB of data apart. Prolonged, continuous, non-sequential access repeated at intervals of 5 seconds or less shortens the lifetime of the disc drive.\nTo avoid unnecessary aging of the disc drive while the user is not operating the application, do not conduct this kind of non-sequential access over a period of more than 1 hour.\nFor example, when playing a long movie, position the files that will be accessed near each other and, if non-sequential access will be carried out, limit the number of loops.\n Note:\n Performing non-sequential access will cause the disc drive's pickup head to make an audible sound as it operates. If this operation sound is heard too frequently, it may cause the user to suspect that the unit is producing abnormal noises and has become defective. It is therefore preferable to use sequential access in order to avoid such situations.\nBelow are examples of this issue and possible solutions.\n \tYou have a demo that plays a video file, while playing a separate audio file as background music. It is possible that this demo will run in an infinite loop.\nSolution 1: Interleave the video and audio files into a single file, and play back the audio portion in software.\nThis will make access to the disc drive sequential.\nSolution 2: Play the background music for a few loops (say, three), and then fade it out and stop playback.\nSubsequently, the demo will only be playing the video, and access to the disc drive will be sequential.\n \tYou play two videos simultaneously, and it is possible that they will be played in an infinite loop.\nSolution 1: Interleave the two video files into a single file.\nThis will make access to the disc drive sequential.\nSolution 2: Play the videos a few times (say, three), and then replace them both with still images.\nThis will avoid playing them in an infinite loop.\n \tYou have an interactive game with artificial intelligence. There is a section where the game continually loads dialogue data, while playing an audio file as background music. If there is no input from the controller, it is possible that this will be repeated in an infinite loop.\nSolution: If there is no input from the controller for a certain period of time (say, 5 minutes), make the game character fall asleep and stop talking.\nAs a result, the game will only access the disc drive to play the background music.\n File System\n Period with No User Input\n Disc Access\n Non-Sequential Access\n Disc Drive\n Aging of the Disc Drive\n Video\n FS\n",0]
,["Pages/Page_47817742.html#PageId_54700294","3.2 Not Using File Timestamps",
"3.2 Not Using File Timestamps\nWhen the application's data files (such as save data) are transferred between devices or are transferred when the system is sent in for repair, the creation date and last-modified date of those files (the file timestamps ctime and mtime in the FSStat structure) are overwritten by the system. For this reason, do not implement your application in a way that displays the file timestamp as the save data creation date, or otherwise base your implementation on the assumption that these timestamps can only be rewritten by the application.\nFor example, do not implement any feature that uses a procedure like the following to check for alteration of save data based on the save data file's last-modified date.\n \tThe application gets the last-modified date of Save Data A from the last-modified timestamp in the FSStat structure. \tThe application saves this last-modified timestamp value in a different save data file (Save Data B). \tNext time the application is launched, the application checks whether the last-modified date of Save Data A is unchanged from the value saved in Save Data B.\n File System\n Save Data\n Timestamps\n File changes\n Checking for alteration\n FSStat structure\n ctime\n mtime\n FS\n SAVE\n",0]
,["Pages/Page_47817742.html#PageId_69370705","3.3 How to Use Disc Timing Emulation",
"3.3 How to Use Disc Timing Emulation\nDisc timing emulation is a feature built into CAT-DEV that emulates the speed of reading a retail disc by taking into account the placement of data on the disc and the associated seek time.\nBy using disc timing emulation, you can test an application in an environment similar to that of the retail disc without needing to burn the application to a CAT-R disc and run it on CAT-R hardware.\nDue to the nature of the hardware, the disc's random access speeds may be slow. As such, there can be major problems if you develop your application on CAT-DEV without using disc timing emulation, and only learn late in the development stages that loading data on a real disc takes longer than expected. You can check the actual access speeds by debugging on CAT-R hardware, but we believe such debugging frequently does not occur until late in the development stages of an application. In order to prevent such problems before they occur, at an early stage of development you must run the application on CAT-DEV with disc timing emulation enabled, and check whether there are any major problems with loading data from the disc.\nIf a problem is found, you may be able to shorten data load time by figuring out a better way to physically arrange the files on the disc. Alternatively, you may also be able to shorten data load time by caching frequently-read data to memory or by devising a way to pack data together so that the smallest possible amount of data is read all together at the same time. If you discover a problem in the early stages, you should have enough time to re-investigate the application's design.\nIn order to use disc timing emulation with SDK 2.12.12 and prior SDK versions, you must perform the following procedure to change the CAT-DEV settings before running the application.\n \tUsing an Internet browser, access the webpage for your particular CAT-DEV unit and enable disc timing emulation.\tSee the Cafe SDK API Reference Manual for detailed steps.\n \tLaunch the application through one of the following methods.\nNote: You cannot use disc timing emulation with the standard command to execute the program (i.e. cafex run <Path to RPX>).\tExecute the application's RPX file with cafex discrun.cafex discrun <Path to RPX>\n\tConvert the application to a wumad file and launch the application with cafex as shown below.cafex run -e wumad:<Path to Wumad>\n\tConvert the application to a wumad file and upload it to the CAT-DEV's built-in HDD, then launch the application with cafex as shown below.cafex run -e h:<bank> -e mcp:launch_hint:odd <Path to RPX>\n\tConvert the application's RPX to a wumad file and upload the file to the CAT-DEV, then launch the application in the CAT-DEV's standalone mode as shown below.cafex headlessrun <Path to RPX>\n File System\n Disc Timing Emulation\n Disc\n CAT-DEV\n CAT-R\n cafex\n wumad\nCONFIDENTIAL\n",0]
,["Pages/Page_47817745.html","4 Controllers",
"4 Controllers\n",0]
,["Pages/Page_47817745.html#PageId_47819492","4.1 Restriction on Repeated Per-Frame Changes of RGB Values Displayed on the Wii U GamePad",
"4.1 Restriction on Repeated Per-Frame Changes of RGB Values Displayed on the Wii U GamePad\nThe LCD screen of the Wii U GamePad uses the dot-inversion drive method, but it is still possible for this screen to develop flickering or symptoms resembling screen burn-in (where an afterimage remains on the screen even after a different image is displayed) if the exact same per-frame change in RGB values is cycled to the same pixel over and over for longer than a certain period of time.\nSpecific examples in which these symptoms occur are shown in the table below.\n \tChange in RGB Values \tRegarded as repeated per-frame change? \tReason\n \t (0,0,0) â (255,255,255) â (0,0,0) â â¦\n \tYes \tR, G, and B cycle between the same values in alternate frames.\n \t (255,255,255) â (255,255,254) â (255,255,255) ââ¦\n \tYes \tB cycles between the same values in alternate frames. Phenomenon occurs even if the change in value is small.\n \t (255,255,255) â (255,255,255) â (0,0,0) â (0,0,0) â (255,255,255) â (255,255,255) â â¦\n \tNo \tR, G, and B cycle between the same values, but the cycle is every two frames.\nThese symptoms will gradually go away as soon as the repeated per-frame change in RGB values stops occurring; however, while present these symptoms would greatly bother the user. Therefore, it is prohibited to continuously cycle the same repeated per-frame change in RGB values to any single pixel on the Wii U GamePad screen for more than a few seconds.\n Note:\n Nintendo sets no restrictions on TV displays for this matter. This is because the concern only applies to LCD displays using the dot-inversion drive method, and not all TVs are this type of display.\n Wii U GamePad\n Controllers\n LCD display\n Cyclical changes\n Screen burn-in\n Changes in brightness\n",0]
,["Pages/Page_47817745.html#PageId_47820253","4.2 Zero-Point Drift in the Accelerometer",
"4.2 Zero-Point Drift in the Accelerometer\nThe zero-point of the accelerometers built into the Wii U GamePad, Wii Remote, and Wii Remote Plus controllers can accumulate a drift of up to Â±0.13G over time (approximately up to 12 degrees in angle).\nFor this reason, you must ensure that your application can handle even a zero-point drift of 0.13G without problems when determining that a controller is at rest, or when using very small changes in attitude information. For example, make allowances for an input play tolerance of 0.13G in your application, or prepare modes with such a feature.\n Wii U GamePad\n Controllers\n Wii Remote\n Wii Remote Plus\n Accelerometer\n Zero-point drift\n KPAD\n WPAD\n VPAD\n",0]
,["Pages/Page_47817745.html#PageId_48694943","4.3 Wii U GamePad Gyro Sensor Zero-Point Correction",
"4.3 Wii U GamePad Gyro Sensor Zero-Point Correction\nThe gyro sensor in the Wii U GamePad automatically performs zero-point correction when the system determines that the GamePad is at rest. Therefore, in applications designed to have the users move the Wii U GamePad extremely slowly, it is possible for the user's motion to not be accurately reflected in the game.\nApplications with specifications in which the Wii U GamePad is moved slowly can avoid this problem by using the VPADSetGyroZeroDriftMode function to set the threshold for the amount of motion that is still regarded as \"at-rest\" by the automatic zero-point correction.\nHowever, if you set VPAD_GYRO_ZERODRIFT_NONE using the VPADSetGyroDriftMode function, you must implement a separate sequence for zero-point correction in your application, such as the following.\n \tTemporarily set VPAD_GYRO_ZERODRIFT_STANDARD using the VPADSetGyroZeroDriftMode function. \tDisplay a message prompting the user to put down the GamePad on a flat surface. \tWait until zero-point correction is complete (until the VPADIsEnableGyroZeroDrift function returns 1.0f). \tSet VPAD_GYRO_ZERODRIFT_NONE using the VPADSetGyroZeroDriftMode function.\nNintendo recommends performing the above sequence every time at the beginning of scenes which use VPAD_GYRO_ZERODRIFT_NONE, and also allowing the sequence to be invoked from within such scenes if they continue for a long time.\n Wii U GamePad\n Controllers\n Gyro sensor\n Zero-Point Correction\n VPADSetGyroZeroDriftMode\n VPAD_GYRO_ZERODRIFT_NONE\n VPAD_GYRO_ZERODRIFT_STANDARD\n VPADIsEnableGyroZeroDrift\n VPAD\n",0]
,["Pages/Page_47817745.html#PageId_47817750","4.4 Prohibition Against Starting Wii MotionPlus",
"4.4 Prohibition Against Starting Wii MotionPlus\nApplications that do not support Wii MotionPlus must not start it.\n Controllers\n Wii MotionPlus\n",0]
,["Pages/Page_47817745.html#PageId_47819514","4.5 Applications That Do Not Use the Wii Remote Pointer",
"4.5 Applications That Do Not Use the Wii Remote Pointer\nApplications that do not use the Wii Remote pointer must turn off the power for the pointer.\n Controllers\n Wii Remote\n Pointer\n",0]
,["Pages/Page_47817745.html#PageId_48705258","4.6 Preventing False Detection of Wii U GamePad Microphone Input",
"4.6 Preventing False Detection of Wii U GamePad Microphone Input\nWii U GamePad microphone input contains a noise component. This means that within certain ranges, microphone input will be erroneously detected even when there is no microphone input present (false positives).\nTo avoid erroneous detection of microphone input, you must thoroughly test the application to verify that no such false response occurs in the anticipated play environment.\n Wii U GamePad\n Controllers\n Microphone\n Noise\n False detection\n False response\n MIC\nCONFIDENTIAL\n",0]
,["Pages/Page_47817753.html","6 Internet Connections",
"6 Internet Connections\n",0]
,["Pages/Page_47817753.html#PageId_47817754","6.1 Implementation for Starting Connections",
"6.1 Implementation for Starting Connections\nThe application must always start an Internet connection by calling either the nn::ac::Connect or nn::ac::ConnectAsync function.\n Internet Connections\n nn::ac::Connect\n nn::ac::ConnectAsync\n AC\n",0]
,["Pages/Page_47817753.html#PageId_60269113","6.2 Caution When Calling Functions Related to Background Processing",
"6.2 Caution When Calling Functions Related to Background Processing\nFunctions in libraries involved with background processing (including AC, ACT, BOSS, FP, and others) may exhibit decreased responsiveness when the application calls functions in higher-priority libraries and increases the load on the system.\nFor that reason, if the application calls functions from background-processing libraries in the main loop and these functions experience decreased responsiveness, it may result in slowdown or skipped frames.\nLikewise, calling such functions frequently (every few frames or so) may result in an increased load on the system, so you must also avoid calling them frequently. If your application uses nn::fp::IsOnline or any other function which needs to check its current status through polling, then instead of calling the function itself when you need to check the status, call the function roughly every 100 msec from a different thread and save the results of those calls.\n Internet Connections\n Background Processing\n AC\n ACT\n BOSS\n FP\n nn::fp::IsOnline function\nCONFIDENTIAL\n",0]
,["Pages/Page_47817758.html","7 Miiverse",
"7 Miiverse\n",0]
,["Pages/Page_47817758.html#PageId_47819622","7.1 Image Data Attached to Posts to Communities or Messages to Friends",
"7.1 Image Data Attached to Posts to Communities or Messages to Friends\nImage data attached to posts to communities or messages to friends must comply with the following format requirements.\n \tItem \tFormat\n \tImage format \t Baseline JPEG format or MPO format\n \tSize \t Baseline JPEG: 320 Ã 240, 400 Ã 240, 640 Ã 480, or 800 Ã 450 (all dimensions are width Ã height)\n MPO: 400 width Ã 240 height\n Miiverse\n Posting to communities\n Messages to friends\n Attached image data\n Image format\n OLV\n",0]
,["Pages/Page_47817758.html#PageId_47819631","7.2 Handwritten Messages Attached to Posts to Communities or Messages to Friends",
"7.2 Handwritten Messages Attached to Posts to Communities or Messages to Friends\nHandwritten messages attached to posts to communities or messages to friends must comply with the following format requirements.\n \tItem \tFormat\n \tImage format \t32-bit TGA file with alpha channel (R,G,B,A)\n \tSize \t320 width Ã 120 height\n \tRGBA \t Pixel color must be either 0xFFFFFFFF (white) or 0x000000FF (black).\n Miiverse\n Posting to communities\n Messages to friends\n Handwritten messages\n Image format\n OLV\n",0]
,["Pages/Page_47817758.html#PageId_47819641","7.3 Community Icons",
"7.3 Community Icons\nCommunity icons must comply with the following format requirements.\n \tItem \tFormat\n \tImage format \t32-bit TGA file with alpha channel (R,G,B,A)\n \tSize \t128 width Ã 128 height\n \tRGBA \tAlpha value of 0xFF\n Miiverse\n Community Icons\n Image format\n OLV\nCONFIDENTIAL\n",0]
,["Pages/Page_47817760.html","5 Mii Characters",
"5 Mii Characters\n",0]
,["Pages/Page_47817760.html#PageId_56756577","5.1 Applications That Use Mii Characters",
"5.1 Applications That Use Mii Characters\nApplications can use two kinds of Mii characters: Mii characters associated with accounts, and Mii characters from the front-end database.\nMii characters registered in the front-end database arrive there by being created in Mii Maker or received from elsewhere.\nApplications that require use of Mii characters from the front-end database must allow the user to progress in the application without any problems even if no Mii characters exist in the front-end database. Nintendo recommends using one of the following methods for handling this kind of situation:\n \tThe application displays a message immediately after application startup directing the user to create a Mii character using Mii Maker, and then suspends application progress until the user has created a Mii character. \tThe application starts using a default Mii character, a random Mii character, or a substitute image provided by the application.\nIn this case, Nintendo recommends displaying a message such as the following: \"There are no Mii characters available, so a substitute Mii will be used instead. You can create a new Mii in Mii Maker,\" or \"There are no Mii characters available. You can create a new Mii in Mii Maker.\"\n Mii Characters\n Front-end database\n Mii Maker\n FFL\n Accounts\n",0]
,["Pages/Page_47817760.html#PageId_55574572","5.2 Prohibition of Altering Mii-Related Data",
"5.2 Prohibition of Altering Mii-Related Data\nIt is prohibited to alter the following data related to Mii characters.\n \tFFLStoreData \tThe Mii face model work buffer \tWork buffer for the intermediate database \tPacket Buffers \tFFLNetInformation buffer \tFFLAdditionalInfo \tOther FFL structures\n Mii Characters\n FFL\n Prohibition of Altering\n FFLStoreData\n Face Model\n Intermediate Database\n Packet Buffers\n FFLNetInformation\n FFLAdditionalInfo\n",0]
,["Pages/Page_47817760.html#PageId_56756593","5.3 Using Additional Information From Mii Characters",
"5.3 Using Additional Information From Mii Characters\nIf your application uses additional information that pertains to a Mii character, ensure that the application can proceed without any problems even if a Mii character is used that has none of the following information configured.\n \tInformation \tMember of FFLAdditionalInfo\n \tCreator Name \tcreator\n \tMonth of birth \tbirthMonth\n \tDay of birth \tbirthDay\n Mii Characters\n Additional Information\n FFLAdditionalInfo\n FFL\n",0]
,["Pages/Page_47817760.html#PageId_47817761","5.4 Obtaining FFLStoreData from Non-FFL Libraries",
"5.4 Obtaining FFLStoreData from Non-FFL Libraries\nBy using the FP, OLV, or NFP libraries from the Cafe SDK, applications are able to obtain the FFLStoreData structure of Mii characters.\nWhenever you pass the FFLStoreData of a Mii character to one of the following functions, you must set the source argument to FFL_DATA_SOURCE_STORE_DATA_ALWAYS.\n \tFFLInitCharModel function \tFFLSetToNetPacket function \tFFLGetAdditionalInfo function\n Note:\n From FFL 1.5.2 onward, the FFL_DATA_SOURCE_STORE_DATA value is deprecated. If you are using that version of FFL or later, you do not need to worry about this issue.\n Friends\n Mii Characters\n FFL\n FFLStoreData\n FFL_DATA_SOURCE_STORE_DATA_ALWAYS\n FFLInitCharModel\n FFLSetToNetPacket\n FFLGetAdditionalInfo\n FP\n OLV\n NFP\n Miiverse\n amiibo\n",0]
,["Pages/Page_47817760.html#PageId_56756643","5.5 Addition of Mii Characters While an Overlay Application is Running",
"5.5 Addition of Mii Characters While an Overlay Application is Running\nBe aware that it is possible for Mii characters to be added to the Mii front-end database while an overlay application (such as the friend list) is running.\nAlso note that Mii characters can only be added to the front-end database while an overlay application is running. Mii characters cannot be deleted from or added to the back-end database.\nNote that you can use the FFLIsUpdatedOfficialData function to get whether the front-end database has been updated.\n Note:\n It is only possible to delete a Mii character from the front-end database via the full version of Mii Maker.\n Mii Characters\n Front-end database\n Overlay Application\n Friend List\n FFLIsUpdatedOfficialData function\n Mii Maker\n Back-end database\n FFL\n",0]
,["Pages/Page_47817760.html#PageId_79059996","5.6 Exchange of Mii Characters via Communication Features",
"5.6 Exchange of Mii Characters via Communication Features\nTo send Mii data to another system using the communication features of the application, Nintendo recommends that you use a packet buffer in which the Mii data has been set by the FFL_SetToNetPacket function.\nNintendo recommends this because the application receives the packet buffer and sets it in FFLNetInformation, which is flushed to generate encounters for the Mii character contained in the packet buffer.\nWhen your application sends Mii nicknames and creator names, Nintendo recommends sending this information in FFLStoreData or packet buffer format.\nNintendo recommends this because the nickname and creator name are automatically checked for profanity by the library when applications use the FFLGetAdditionalInfo function to get these names. If your application exchanges nicknames or creator names as strings, your application must perform the profanity check.\n Note:\n Contact Nintendo at support@noa.com if you are considering sending Mii characters to platforms other than Wii U using communication features.\n Mii Characters\n Communication Features\n FFLSetToNetPacket\n Packet Buffers\n FFLNetInformation\n Mii Encounters\n FFLStoreData\n FFLGetAdditionalInfo\n Profanity Checking\nCONFIDENTIAL\n",0]
,["Pages/Page_47817765.html","8 Mastering",
"8 Mastering\n",0]
,["Pages/Page_47817765.html#PageId_47817766","8.1 Prohibition Against Altering Application Configuration Files",
"8.1 Prohibition Against Altering Application Configuration Files\nIt is prohibited to manually edit the following files:\n \tapp.xml \tcos.xml \tDDF files \tmasterinfo.xml \tmeta.xml\n Mastering\n Application Configuration Files\n Prohibition Against Manual Editing\n app.xml\n cos.xml\n DDF files\n masterinfo.xml\n meta.xml\nCONFIDENTIAL\n",0]
,["Pages/Page_47819606.html","2 System: General",
"2 System: General\n",0]
,["Pages/Page_47819606.html#PageId_47819471","2.1 Shutdown Processing",
"2.1 Shutdown Processing\nMake every effort to complete shutdown processing for your application within 3 seconds. Note, however, that the situations outlined below, where technical factors make it difficult to complete shutdown in time, are treated as exceptions.\n \tWhen writing save data or data equivalent to save data. \tDuring communication.\nEnsure the integrity of your save data files even when shutting down. Also see the Function References for further details about the libraries that must have a normal (not forced) shutdown.\n Note:\n The forced shutdown feature is not activated in the current system version. This means that applications must not continue normal processing in anticipation of the forced shutdown.\n In particular, if the user presses the POWER Button during a disc error and the application then attempts disc access again, control fails to return from that function. When performing shutdown processing for the FS library, always ensure that you call the FSDelClient function, which always returns control.\n Note:\n With the current mechanism, it is not possible to clearly distinguish between the application's shutdown processing and the system's shutdown processing. With that said, you can use the following methods as reference to test the length of application shutdown processing, although the results are not conclusive.\n \tClose the application from the HOME Menu and time how long it takes to return to the Wii U Menu.\tThe system-side shutdown processing can sometimes take as long as 30 seconds. If it takes significantly longer than 30 seconds to return to the menu, check how the application implements its shutdown processing.\n \tPress the POWER Button and time how long it takes for the screen display to disappear.\tIf the application continues rendering (screen display continues moving) for 3 seconds or more, then it is safe to assume that the application's shutdown processing takes 3 seconds or more.\tThis method cannot be used if the application implements some mechanism to turn the screen black (or otherwise discontinue screen display) whenever the POWER Button is pressed.\n Shutdown\n Save Data\n Forced Shutdown\n FSDelClient\n Wii U Menu\n FS\n",0]
,["Pages/Page_47819606.html#PageId_60269181","2.2 Effects of Background Processing on the Application",
"2.2 Effects of Background Processing on the Application\nBackground processes such as downloading data may affect application processing.\nUse Background Stress Mode to check whether or not the effects of background processing are within a range allowable for the application.\nFor details on Background Stress Mode, see the Wii U Background Stress Mode documentation included in the Cafe-SDK.\n Background Processing\n Background Stress Mode\nCONFIDENTIAL\n",0]
,["Pages/Page_48699491.html","1 Introduction",
"1 Introduction\nThis document is written for programmers working on Wii U applications. It contains a number of precautions to be aware of during development.\nYou may use either method below to navigate the precautions and check whether any apply to your application.\n \tBy Keyword\n\tAllows you to check precautions by related keywords.\n \tBy Page\tAllows you to check precautions by the volume (general category) they are sorted into.\nCONFIDENTIAL\n",0]
,["Pages/Page_79060051.html","9 UGC",
"9 UGC\n",0]
,["Pages/Page_79060051.html#PageId_79060145","9.1 Handling When Saving UGC to Shared Save Data",
"9.1 Handling When Saving UGC to Shared Save Data\nWhen applications save UGC (either created by the user or received from elsewhere) to shared save data, depending on the application's specifications this UGC may unintentionally be viewed or distributed to users on other accounts registered on the same system.\nAs a result, if your application saves UGC to shared save data, you must must fully investigate to ensure that issues will not arise even if users on other accounts can access this UGC.\n UGC\n Shared Save Data\n Saving\nCONFIDENTIAL\n",0]
];
for (var x = 0; x < additionalData.length; x++) Search.indexData.push(additionalData[x]);
Search.additionalData = additionalData;
})();
